/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wdym;

import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Cabrera
 */
public class WDYM extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    String directorio = new File("").getAbsolutePath();

    static Connection connection = null;
    static String databasename = "comandosdb";
    static String url = "jdbc:mysql://localhost:3306/" + databasename;
    static String username = "root";
    static String password = "1234";

    boolean esperandoLS = false;
    boolean esperandoMKDIR = false;

    //declaraciones regex
    String patronLS = "((l(w|a|d|s|x|z)|(j|m|k|o|l)s))";

    String patronMKDIR
            = "("
            + "(m(m|k|i|j|l)(d|e|x|c|f)(i|8|u|o|k)(r|4|e|t|f))(\\s)[a-zA-Z0-9\\s]+" //combinaciones posibles con la m buena
            + "|"
            + "((m|k|j|n|)k(d|e|x|c|f)(i|8|u|o|k)(r|4|e|t|f))(\\s)[a-zA-Z0-9\\s]+" //combinaciones posibles con la k buena
            + "|"
            + "((m|k|j|n|)(m|k|i|j|l)d(i|8|u|o|k)(r|4|e|t|f))(\\s)[a-zA-Z0-9\\s]+" //combinaciones posibles con la d buena 
            + "|"
            + "((m|k|j|n|)(m|k|i|j|l)(d|e|x|c|f)i(r|4|e|t|f))(\\s)[a-zA-Z0-9\\s]+" //combinaciones posibles con la i buena 
            + "|"
            + "((m|k|j|n|)(m|k|i|j|l)(d|e|x|c|f)(i|8|u|o|k)r)(\\s)[a-zA-Z0-9\\s]+" //combinaciones posibles con la r buena 
            + ")";

    String patronMKDIRSinParametro
            = "("
            + "(m(m|k|i|j|l)(d|e|x|c|f)(i|8|u|o|k)(r|4|e|t|f))(\\s)*" //combinaciones posibles con la m buena
            + "|"
            + "((m|k|j|n|)k(d|e|x|c|f)(i|8|u|o|k)(r|4|e|t|f))](\\s)*" //combinaciones posibles con la k buena
            + "|"
            + "((m|k|j|n|)(m|k|i|j|l)d(i|8|u|o|k)(r|4|e|t|f))(\\s)*" //combinaciones posibles con la d buena 
            + "|"
            + "((m|k|j|n|)(m|k|i|j|l)(d|e|x|c|f)i(r|4|e|t|f))(\\s)*" //combinaciones posibles con la i buena 
            + "|"
            + "((m|k|j|n|)(m|k|i|j|l)(d|e|x|c|f)(i|8|u|o|k)r)(\\s)*" //combinaciones posibles con la r buena 
            + ")";

    ArrayList<String> comandos = new ArrayList<>();

    String LSInput = "";
    String MKDIRInput = "";
    boolean ImprimirComandoMisc = true;

    public WDYM() throws SQLException {

        String query = ("SELECT ComandoIngresado FROM comandosdb.comandos;");
        PreparedStatement ps = connection.prepareStatement(query);
        ResultSet rs = ps.executeQuery();

        while (rs.next()) {
            String comando = rs.getString("ComandoIngresado");
            comandos.add(comando);
        }
        initComponents();
        ConsoleOut.setText(directorio + ">");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ConsoleOut = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        ConsoleInput = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        BorrarBD = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setForeground(new java.awt.Color(0, 0, 0));

        ConsoleOut.setEditable(false);
        ConsoleOut.setBackground(new java.awt.Color(0, 0, 0));
        ConsoleOut.setColumns(20);
        ConsoleOut.setFont(new java.awt.Font("Lucida Console", 0, 11)); // NOI18N
        ConsoleOut.setForeground(new java.awt.Color(255, 255, 255));
        ConsoleOut.setLineWrap(true);
        ConsoleOut.setRows(5);
        jScrollPane1.setViewportView(ConsoleOut);

        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        ConsoleInput.setBackground(new java.awt.Color(153, 153, 153));
        ConsoleInput.setColumns(20);
        ConsoleInput.setFont(new java.awt.Font("Lucida Console", 0, 11)); // NOI18N
        ConsoleInput.setForeground(new java.awt.Color(255, 255, 255));
        ConsoleInput.setRows(5);
        ConsoleInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ConsoleInputKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(ConsoleInput);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 623, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jMenu1.setText("File");

        BorrarBD.setText("Limpiar BD");
        BorrarBD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarBDActionPerformed(evt);
            }
        });
        jMenu1.add(BorrarBD);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ConsoleInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ConsoleInputKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            ImprimirComandoMisc = true; //reset variable para imprimir lo que sea que no sea mkdir o ls o clear

            String texto = ConsoleInput.getText();

            //revisar si esta el cmd esperando respuesta o no
            if (esperandoLS) {
                if (texto.trim().equals("y") || texto.trim().equals("Y")) {  // agregar a BD

                    try {
                        PreparedStatement ps = connection.prepareStatement("INSERT INTO comandos(comandoingresado, comandoreal) VALUES ('" + LSInput + "','ls');");
                        int status = ps.executeUpdate();

                        if (status != 0) {
                            System.out.println("Comando " + LSInput + " agregado a la BD, referenciando a ls.");
                        }

                    } catch (Exception e) {
                        System.out.println(e.toString());
                    }

                    esperandoLS = false;
                } else { //si ingreso n o cualquier otro caracter
                    esperandoLS = false;
                    ConsoleOut.append("\n" + directorio + ">" + texto.trim() + "\n");
                    ImprimirComandoMisc = false;
                    ConsoleInput.setText("");
                }
            }

            if (esperandoMKDIR) {
                if (texto.trim().equals("y") || texto.trim().equals("Y")) {  // agregar a BD

                    try {
                        PreparedStatement ps = connection.prepareStatement("INSERT INTO comandos(comandoingresado, comandoreal) VALUES ('" + MKDIRInput.trim() + "','mkdir');");
                        int status = ps.executeUpdate();

                        if (status != 0) {
                            System.out.println("Comando '" + MKDIRInput + "' agregado a la BD, referenciando a MKDIR.");
                        }

                    } catch (Exception e) {
                        System.out.println(e.toString());
                    }
                    esperandoMKDIR = false;
                } else { //si ingreso n o cualquier otro caracter
                    esperandoMKDIR = false;
                    ConsoleOut.append("\n" + directorio + ">" + texto.trim());
                    ImprimirComandoMisc = false;
                    ConsoleInput.setText("");
                }
            }

            //busqueda de regex
            if (texto.trim().matches(patronLS)) { //encontro algo cerca de 'ls'

                if (!texto.trim().equals("ls")) { //cualquier otra cosa que no es ls pero es cerca

                    ArrayList<String> search = new ArrayList<>();

                    try {
                        String query = ("SELECT * FROM comandosdb.comandos WHERE ComandoIngresado = '" + texto.trim() + "';");
                        PreparedStatement ps = connection.prepareStatement(query);
                        ResultSet rs = ps.executeQuery();

                        while (rs.next()) {
                            String comando = rs.getString("ComandoIngresado");
                            search.add(comando);
                        }

                        if (search.size() == 1) {
                            correrLS(texto.trim());
                            ImprimirComandoMisc = false;
                        } else {
                            ConsoleOut.append("\n" + directorio + ">" + texto.trim() + "\n");
                            ConsoleOut.append("Did you mean 'ls'? [y/n]" + "\n ...");
                            ConsoleInput.setText("");
                            LSInput = texto.trim();
                            esperandoLS = true; //esperando respuesta
                            ImprimirComandoMisc = false;
                        }

                    } catch (Exception e) {
                        e.toString();
                    }

                } else { //el comando ingresado ES ls
                    correrLS("ls");
                    ImprimirComandoMisc = false;
                }

            }

            if (texto.trim().matches(patronMKDIRSinParametro)) { //encontro un mkdir sin parametro
                ConsoleOut.append("\n" + directorio + ">" + "Falta parametro a mkdir, favor usar mkdir [nombre de folder]");
                ConsoleInput.setText("");
                ImprimirComandoMisc = false;
            } else {
                if (texto.trim().matches(patronMKDIR)) { //encontro mkdir

                    String[] split = texto.trim().split(" ");

                    if (!split[0].trim().equals("mkdir")) { //cualquier otra cosa que no es mkdir pero es cerca

                        ArrayList<String> search = new ArrayList<>();

                        try {
                            String query = ("SELECT * FROM comandosdb.comandos WHERE ComandoIngresado = '" + split[0].trim() + "';");
                            PreparedStatement ps = connection.prepareStatement(query);
                            ResultSet rs = ps.executeQuery();

                            while (rs.next()) {
                                String comando = rs.getString("ComandoIngresado");
                                search.add(comando);
                            }

                            if (search.size() == 1) {
                                
                                CheckLength(split);
                                ImprimirComandoMisc = false;
                                ConsoleInput.setText("");
                            } else {
                                ConsoleOut.append("\n" + directorio + ">" + texto.trim() + "\n");
                                ConsoleOut.append("Did you mean 'mkdir [foldername]'? [y/n]" + "\n ...");
                                ConsoleInput.setText("");
                                MKDIRInput = split[0];
                                esperandoMKDIR = true; //esperando respuesta
                                ImprimirComandoMisc = false;

                            }

                        } catch (Exception e) {

                        }

                    } else { //si el comando mkdir esta correcto

                        CheckLength(split);

                    }
                }
            }

            //cualquier otro comando o misc.
            if (texto.trim().equals("clear")) { //solo para limpiar
                ConsoleOut.setText("");
                ConsoleOut.setText(directorio + ">clear");
                ConsoleInput.setText("");
            } else if (ImprimirComandoMisc) { // cualquier otra cosa que se ha ingresado
                ConsoleOut.append("\n" + directorio + ">" + texto.trim());
                ConsoleInput.setText("");
            }

        }
    }//GEN-LAST:event_ConsoleInputKeyPressed

    public void CheckLength(String[] split) { //revisa si el comando de mkdir tiene varias palabras
        if (split.length >= 3) { //si el nombre son varias palabras o numeros
            String foldername = "";

            for (int i = 1; i < split.length; i++) {
                foldername += split[i] + " ";
            }
            correrMKDIR(foldername);
            ConsoleInput.setText("");
            ImprimirComandoMisc = false;

        } else { //si el nombre solo es una palabra
            correrMKDIR(split[1]);
            ConsoleInput.setText("");
            ImprimirComandoMisc = false;
        }
    }

    private void BorrarBDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarBDActionPerformed
        // TODO add your handling code here:
        try {
            PreparedStatement ps = connection.prepareStatement("truncate table comandosdb.comandos;");
            int status = ps.executeUpdate();

            if (status != 0) {
                System.out.println("BD borrada.");
            }

        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }//GEN-LAST:event_BorrarBDActionPerformed

    public void correrLS(String texto) {
        File folder = new File(directorio);
        File[] listOfFiles = folder.listFiles();

        ConsoleOut.append(texto.trim() + "\n");
        ConsoleInput.setText("");

        for (File file : listOfFiles) {
            if (file.isDirectory()) {
                ConsoleOut.append(file.getName() + "(folder)" + "\n");
            } else {
                ConsoleOut.append(file.getName() + "\n");

            }
        }
        ConsoleOut.append("\n" + directorio + ">");
    }

    public boolean correrMKDIR(String texto) {
        File f = new File(directorio + "/" + texto);

        if (f.mkdir()) {

            System.out.println("Directory is created");
            ConsoleOut.append("\n" + directorio + ">Directorio '" + texto + "' fue creado exitosamente." + "\n");
            return true;
        } else {
            ConsoleOut.append("\n" + directorio + ">Directorio '" + texto + "' ya existe." + "\n");
            System.out.println("Directory cannot be created");
            return false;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WDYM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WDYM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WDYM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WDYM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        Class.forName("com.mysql.jdbc.Driver").newInstance();
        connection = DriverManager.getConnection(url, username, password);
        try {
            /*PreparedStatement ps = connection.prepareStatement("INSERT INTO comandos(comandoingresado) VALUES ('DIR');");
            int status = ps.executeUpdate();
            
             if (status != 0) {
                System.out.println("Comando ingresado");
            }
             */
        } catch (Exception e) {
            System.out.println(e.toString());
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new WDYM().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(WDYM.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem BorrarBD;
    private javax.swing.JTextArea ConsoleInput;
    private javax.swing.JTextArea ConsoleOut;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
